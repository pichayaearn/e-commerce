// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/pichayaearn/e-commerce/pkg/model/order_product"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// OrderSvc is an autogenerated mock type for the OrderSvc type
type OrderSvc struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: orderID, userID
func (_m *OrderSvc) CancelOrder(orderID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(orderID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(orderID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: opts
func (_m *OrderSvc) CreateOrder(opts model.CreateOrder) error {
	ret := _m.Called(opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.CreateOrder) error); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: opts, ctx
func (_m *OrderSvc) List(opts model.GetOrder, ctx context.Context) ([]model.Order, error) {
	ret := _m.Called(opts, ctx)

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(model.GetOrder, context.Context) ([]model.Order, error)); ok {
		return rf(opts, ctx)
	}
	if rf, ok := ret.Get(0).(func(model.GetOrder, context.Context) []model.Order); ok {
		r0 = rf(opts, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(model.GetOrder, context.Context) error); ok {
		r1 = rf(opts, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderSvc creates a new instance of OrderSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderSvc {
	mock := &OrderSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
